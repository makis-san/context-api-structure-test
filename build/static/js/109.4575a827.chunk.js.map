{"version":3,"file":"static/js/109.4575a827.chunk.js","mappings":"wNAEaA,EAAaC,EAAAA,GAAAA,IAAH,sJCAVC,EAAmBD,EAAAA,GAAAA,IAAH,sF,8BCAhBE,E,MAAMC,GAAAA,OAAa,CAC9BC,QAAS,8B,SCGX,aACE,OAAmCC,EAAAA,EAAAA,KAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAClB,ECqB2B,WAC3B,IAAMC,GAAiBC,EAAAA,EAAAA,aAAY,gBAAgB,kBACjDP,EAAAA,IAAA,kCAEGQ,MAAK,SAACC,GAAD,OAASA,EAAIC,WAYjBC,GAAoBJ,EAAAA,EAAAA,aACxB,sBACA,SAACK,GAAD,OACEZ,EAAAA,IAAA,oCACuD,GAAKY,IACzDJ,MAAK,SAACC,GAAD,OAASA,EAAIC,WAgBzB,MAAO,CACLG,aAdmB,SACnBD,EACAE,GAQA,MAAO,CAAEJ,KANIC,EAAkBI,OAAOH,EAAW,CAC/CI,UAAW,SAACP,GACNK,GAAUA,EAASL,QAS3BQ,OAjCa,SAACH,GAOd,MAAO,CAAEJ,KANIJ,EAAeS,YAAOG,EAAW,CAC5CF,UAAW,SAACP,GACNK,GAAUA,EAASL,SD9BIU,GAAzBF,EAAR,EAAQA,OAAQJ,EAAhB,EAAgBA,aAEhB,GAAwBO,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,cAOP,IAEH,IAGMC,EAAsB,SAACZ,GAAD,IAAoBa,IAApB,gEAC1BZ,EAAaD,GAAW,SAACF,GAAD,OACtBL,EAAa,WAAYK,EAAKgB,QAAS,CACrCD,SAAAA,QAcN,OACE,4BACE,kCACA,mBAAQE,KAAK,SAASC,QAAS,kBAtBjCX,GAAO,SAACP,GAAD,OAAUL,EAAa,WAAYK,EAAKgB,aAsB7C,uBAGA,mBAAQC,KAAK,SAASC,QAAS,kBAAMJ,EAAoB,GAAG,IAA5D,6BAGA,mBAAQG,KAAK,SAASC,QAAS,kBAbjCN,EAAQD,EAAO,QACfG,EAAoBH,EAAO,IAYzB,SACG,OAEH,mBAAQM,KAAK,SAASC,QAAS,kBArBjCN,EAAQD,EAAO,QACfG,EAAoBH,EAAO,IAoBzB,SACG,OAEH,SAACtB,EAAD,UACGK,EAASyB,UACRzB,EAASyB,SAASC,KAAI,SAACC,GAAD,OACpB,SAAClC,EAAD,UAAakC,EAAMC","sources":["components/PokemonBar.tsx","components/PokemonContainer.tsx","service/api.ts","views/Home/Home.view.tsx","hooks/query/queryPokemons.ts"],"sourcesContent":["import styled from 'styled-components'\n\nexport const PokemonBar = styled.div`\n  flex: 23%auto;\n  display: flex;\n  transition: all 0.25s ease;\n  background: #a4a4a4;\n  color: white;\n  padding: 1rem;\n`\n","import styled from 'styled-components'\n\nexport const PokemonContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n","import axios from 'axios'\n\nexport const api = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2'\n})\n","import React, { useEffect, useState } from 'react'\nimport { PokemonBar } from '../../components/PokemonBar'\nimport { PokemonContainer } from '../../components/PokemonContainer'\nimport { usePage } from '../../context/PageContext/PageContext'\nimport { queryPokemons } from '../../hooks/query'\n\nexport default () => {\n  const { entities, dispatchData } = usePage()\n  const { getAll, getPaginated } = queryPokemons()\n\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    /*\n      We need to fetch the main used data for the page\n      on the page load.\n\n      Let start a paginated request in the first page\n    */\n  }, [])\n\n  const handleLoadAll = () =>\n    getAll((data) => dispatchData('pokemons', data.results))\n\n  const handleLoadPaginated = (pageParam: number, keepLast = true) =>\n    getPaginated(pageParam, (data) =>\n      dispatchData('pokemons', data.results, {\n        keepLast\n      })\n    )\n\n  const handleNextPage = () => {\n    setPage(page + 1)\n    handleLoadPaginated(page + 1)\n  }\n\n  const handleBackPage = () => {\n    setPage(page - 1)\n    handleLoadPaginated(page - 1)\n  }\n\n  return (\n    <div>\n      <h1>HOME</h1>\n      <button type='button' onClick={() => handleLoadAll()}>\n        Load All\n      </button>\n      <button type='button' onClick={() => handleLoadPaginated(1, false)}>\n        Load Paginated\n      </button>\n      <button type='button' onClick={() => handleBackPage()}>\n        {'<'}\n      </button>\n      <button type='button' onClick={() => handleNextPage()}>\n        {'>'}\n      </button>\n      <PokemonContainer>\n        {entities.pokemons &&\n          entities.pokemons.map((value) => (\n            <PokemonBar>{value.name}</PokemonBar>\n          ))}\n      </PokemonContainer>\n    </div>\n  )\n}\n","import { useMutation } from 'react-query'\nimport { api } from '../../service/api'\n\nexport type ReturnOBJ = {\n  name: string\n  url: string\n}\n\nexport interface PaginatedResponse {\n  count: number\n  next?: string\n  previous?: string\n  results: ReturnOBJ[]\n}\n\nexport type QueryResponse<T> = {\n  data: T | undefined\n  error: unknown\n}\nexport interface QueryPokemonsTypes {\n  getPaginated: (\n    pageParam?: number,\n    callBack?: (data: PaginatedResponse) => void\n  ) => QueryResponse<PaginatedResponse>\n  getAll: (\n    callBack?: (data: PaginatedResponse) => void\n  ) => QueryResponse<ReturnOBJ[]>\n}\n\nexport const queryPokemons = () => {\n  const getAllMutation = useMutation('pokemons/all', () =>\n    api\n      .get<PaginatedResponse>(`/pokemon/?limit=500&offset=500`)\n      .then((res) => res.data)\n  )\n  const getAll = (callBack?: (data: PaginatedResponse) => void) => {\n    const data = getAllMutation.mutate(undefined, {\n      onSuccess: (res) => {\n        if (callBack) callBack(res)\n      }\n    })\n\n    return { data }\n  }\n\n  const paginatedMutation = useMutation(\n    'pokemons/paginated',\n    (pageParam: number) =>\n      api\n        .get<PaginatedResponse>(`/pokemon/?limit=20&offset=${20 * pageParam}`)\n        .then((res) => res.data)\n  )\n\n  const getPaginated = (\n    pageParam: number,\n    callBack?: (data: PaginatedResponse) => void\n  ) => {\n    const data = paginatedMutation.mutate(pageParam, {\n      onSuccess: (res) => {\n        if (callBack) callBack(res)\n      }\n    })\n\n    return { data }\n  }\n\n  return {\n    getPaginated,\n    getAll\n  } as QueryPokemonsTypes\n}\n"],"names":["PokemonBar","styled","PokemonContainer","api","axios","baseURL","usePage","entities","dispatchData","getAllMutation","useMutation","then","res","data","paginatedMutation","pageParam","getPaginated","callBack","mutate","onSuccess","getAll","undefined","queryPokemons","useState","page","setPage","useEffect","handleLoadPaginated","keepLast","results","type","onClick","pokemons","map","value","name"],"sourceRoot":""}