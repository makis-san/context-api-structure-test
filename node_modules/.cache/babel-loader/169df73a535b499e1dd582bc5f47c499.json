{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { api } from '../../service/api';\nexport const queryPokemons = () => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const getAll = () => {\n    _s();\n\n    const {\n      data,\n      error\n    } = useQuery('pokemons/all', () => api.get(`/pokemon/?limit=500&offset=500`).then(data => data.data), {\n      keepPreviousData: true\n    });\n    if (error || !data) return;\n    return setAll(data === null || data === void 0 ? void 0 : data.results);\n  };\n\n  _s(getAll, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n    return [useQuery];\n  });\n\n  const getPaginated = function () {\n    _s2();\n\n    let pageParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : page;\n    const {\n      data,\n      error\n    } = useQuery('pokemons/paginated', () => api.get(`/pokemon/?limit=20&offset=${20 * page}`).then(data => data.data), {\n      keepPreviousData: true\n    });\n    if (error || !data) return;\n\n    if (!allData) {\n      setAll([...allData, ...data.results]);\n    }\n\n    return setPaginated(data);\n  };\n\n  _s2(getPaginated, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n    return [useQuery];\n  });\n\n  const nextPage = () => setPage(page + 1);\n\n  const previousPage = () => setPage(page + 1);\n\n  return {\n    data: {\n      allData: allData,\n      paginated: {\n        paginatedData,\n        page\n      }\n    },\n    actions: {\n      getPaginated,\n      nextPage,\n      previousPage,\n      getAll\n    }\n  };\n};","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/hooks/query/queryPokemons.ts"],"names":["useQuery","api","queryPokemons","getAll","data","error","get","then","keepPreviousData","setAll","results","getPaginated","pageParam","page","allData","setPaginated","nextPage","setPage","previousPage","paginated","paginatedData","actions"],"mappings":"AACA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,mBAApB;AA8BA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;AAAA;;AACjC,QAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBL,QAAQ,CAC9B,cAD8B,EAE9B,MACEC,GAAG,CACAK,GADH,CAC2B,gCAD3B,EAEGC,IAFH,CAESH,IAAD,IAAUA,IAAI,CAACA,IAFvB,CAH4B,EAM9B;AACEI,MAAAA,gBAAgB,EAAE;AADpB,KAN8B,CAAhC;AAUA,QAAIH,KAAK,IAAI,CAACD,IAAd,EAAoB;AACpB,WAAOK,MAAM,CAACL,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEM,OAAP,CAAb;AACD,GAbD;;AADiC,KAC3BP,MAD2B;AAAA,YAEPH,QAFO;AAAA;;AAgBjC,QAAMW,YAAY,GAAG,YAA8B;AAAA;;AAAA,QAA7BC,SAA6B,uEAATC,IAAS;AACjD,UAAM;AAAET,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBL,QAAQ,CAC9B,oBAD8B,EAE9B,MACEC,GAAG,CACAK,GADH,CAC2B,6BAA4B,KAAKO,IAAK,EADjE,EAEGN,IAFH,CAESH,IAAD,IAAUA,IAAI,CAACA,IAFvB,CAH4B,EAM9B;AACEI,MAAAA,gBAAgB,EAAE;AADpB,KAN8B,CAAhC;AAUA,QAAIH,KAAK,IAAI,CAACD,IAAd,EAAoB;;AAEpB,QAAI,CAACU,OAAL,EAAc;AACZL,MAAAA,MAAM,CAAC,CAAC,GAAGK,OAAJ,EAAa,GAAGV,IAAI,CAACM,OAArB,CAAD,CAAN;AACD;;AACD,WAAOK,YAAY,CAACX,IAAD,CAAnB;AACD,GAjBD;;AAhBiC,MAgB3BO,YAhB2B;AAAA,YAiBPX,QAjBO;AAAA;;AAmCjC,QAAMgB,QAAQ,GAAG,MAAMC,OAAO,CAACJ,IAAI,GAAG,CAAR,CAA9B;;AACA,QAAMK,YAAY,GAAG,MAAMD,OAAO,CAACJ,IAAI,GAAG,CAAR,CAAlC;;AAEA,SAAO;AACLT,IAAAA,IAAI,EAAE;AACJU,MAAAA,OAAO,EAAEA,OADL;AAEJK,MAAAA,SAAS,EAAE;AACTC,QAAAA,aADS;AAETP,QAAAA;AAFS;AAFP,KADD;AAQLQ,IAAAA,OAAO,EAAE;AACPV,MAAAA,YADO;AAEPK,MAAAA,QAFO;AAGPE,MAAAA,YAHO;AAKPf,MAAAA;AALO;AARJ,GAAP;AAgBD,CAtDM","sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { api } from '../../service/api'\n\nexport type ReturnOBJ = {\n  name: string\n  url: string\n}\n\nexport interface PaginatedResponse {\n  count: number\n  next?: string\n  previous?: string\n  results: ReturnOBJ[]\n}\n\nexport interface QueryPokemonsTypes {\n  data: {\n    allData?: ReturnOBJ[]\n    paginated: {\n      paginatedData?: PaginatedResponse\n      page: number\n    }\n  }\n  actions: {\n    getPaginated: (pageParam?: number) => void\n    nextPage: () => void\n    previousPage: () => void\n    getAll: () => void\n  }\n}\n\nexport const queryPokemons = () => {\n  const getAll = () => {\n    const { data, error } = useQuery(\n      'pokemons/all',\n      () =>\n        api\n          .get<PaginatedResponse>(`/pokemon/?limit=500&offset=500`)\n          .then((data) => data.data),\n      {\n        keepPreviousData: true\n      }\n    )\n    if (error || !data) return\n    return setAll(data?.results)\n  }\n\n  const getPaginated = (pageParam: number = page) => {\n    const { data, error } = useQuery(\n      'pokemons/paginated',\n      () =>\n        api\n          .get<PaginatedResponse>(`/pokemon/?limit=20&offset=${20 * page}`)\n          .then((data) => data.data),\n      {\n        keepPreviousData: true\n      }\n    )\n    if (error || !data) return\n\n    if (!allData) {\n      setAll([...allData, ...data.results])\n    }\n    return setPaginated(data)\n  }\n\n  const nextPage = () => setPage(page + 1)\n  const previousPage = () => setPage(page + 1)\n\n  return {\n    data: {\n      allData: allData,\n      paginated: {\n        paginatedData,\n        page\n      }\n    },\n    actions: {\n      getPaginated,\n      nextPage,\n      previousPage,\n\n      getAll\n    }\n  } as QueryPokemonsTypes\n}\n"]},"metadata":{},"sourceType":"module"}