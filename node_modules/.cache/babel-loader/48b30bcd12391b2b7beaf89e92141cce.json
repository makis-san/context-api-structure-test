{"ast":null,"code":"var _jsxFileName = \"/Users/santiagosouza/poc-context-struct/src/context/Pokemons/PokemonsContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport { queryPokemons } from '../../hooks/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokemonsContext = /*#__PURE__*/createContext({});\nexport const usePokemons = () => {\n  _s();\n\n  return useContext(PokemonsContext);\n};\n\n_s(usePokemons, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const PokemonContextWrapper = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [allData, setAll] = useState([]);\n  const [paginatedData, setPaginated] = useState();\n  const [page, setPage] = useState(1);\n  const {\n    actions\n  } = queryPokemons({\n    allData,\n    paginatedData,\n    setAll: data => setAll(data),\n    page,\n    setPage,\n    setPaginated\n  });\n  const runPaginated = useCallback(() => {\n    actions.paginated.getPaginated();\n    return {\n      data: paginatedData,\n      actions: actions.paginated\n    };\n  }, []);\n  const runAll = useCallback(() => {\n    actions.paginated.getPaginated();\n    return {\n      data: allData,\n      actions: actions.all\n    };\n  }, []);\n  const ctxValue = useMemo(() => ({\n    paginated: runPaginated,\n    all: runAll\n  }), [actions, paginatedData, allData]);\n  return /*#__PURE__*/_jsxDEV(PokemonsContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(PokemonContextWrapper, \"8xggS+cHD3rfj1qA5U/9/UkMqeI=\");\n\n_c = PokemonContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonContextWrapper\");","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/context/Pokemons/PokemonsContext.tsx"],"names":["React","createContext","useCallback","useContext","useMemo","useState","queryPokemons","PokemonsContext","usePokemons","PokemonContextWrapper","children","allData","setAll","paginatedData","setPaginated","page","setPage","actions","data","runPaginated","paginated","getPaginated","runAll","all","ctxValue"],"mappings":";;;;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,aAAT,QAA8B,mBAA9B;;AAuBA,MAAMC,eAAe,gBAAGN,aAAa,CAAC,EAAD,CAArC;AAEA,OAAO,MAAMO,WAAW,GAAG;AAAA;;AAAA,SAAML,UAAU,CAACI,eAAD,CAAhB;AAAA,CAApB;;GAAMC,W;;AACb,OAAO,MAAMC,qBAA+B,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC/D,QAAM,CAACC,OAAD,EAAUC,MAAV,IAAoBP,QAAQ,CAAc,EAAd,CAAlC;AACA,QAAM,CAACQ,aAAD,EAAgBC,YAAhB,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAS,CAAT,CAAhC;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAcX,aAAa,CAAC;AAChCK,IAAAA,OADgC;AAEhCE,IAAAA,aAFgC;AAGhCD,IAAAA,MAAM,EAAGM,IAAD,IAAUN,MAAM,CAACM,IAAD,CAHQ;AAIhCH,IAAAA,IAJgC;AAKhCC,IAAAA,OALgC;AAMhCF,IAAAA;AANgC,GAAD,CAAjC;AASA,QAAMK,YAAY,GAAGjB,WAAW,CAAC,MAAM;AACrCe,IAAAA,OAAO,CAACG,SAAR,CAAkBC,YAAlB;AACA,WAAO;AACLH,MAAAA,IAAI,EAAEL,aADD;AAELI,MAAAA,OAAO,EAAEA,OAAO,CAACG;AAFZ,KAAP;AAID,GAN+B,EAM7B,EAN6B,CAAhC;AAQA,QAAME,MAAM,GAAGpB,WAAW,CAAC,MAAM;AAC/Be,IAAAA,OAAO,CAACG,SAAR,CAAkBC,YAAlB;AACA,WAAO;AACLH,MAAAA,IAAI,EAAEP,OADD;AAELM,MAAAA,OAAO,EAAEA,OAAO,CAACM;AAFZ,KAAP;AAID,GANyB,EAMvB,EANuB,CAA1B;AAQA,QAAMC,QAAQ,GAAGpB,OAAO,CACtB,OAAO;AACLgB,IAAAA,SAAS,EAAED,YADN;AAELI,IAAAA,GAAG,EAAED;AAFA,GAAP,CADsB,EAKtB,CAACL,OAAD,EAAUJ,aAAV,EAAyBF,OAAzB,CALsB,CAAxB;AAQA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEa,QAAjC;AAAA,cACGd;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3CM;;IAAMD,qB;;KAAAA,qB","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState\n} from 'react'\nimport { queryPokemons } from '../../hooks/query'\nimport {\n  PaginatedResponse,\n  QueryPokemonsTypes,\n  ReturnOBJ\n} from '../../hooks/query/queryPokemons'\n\ninterface PokemonsContextTypes {\n  paginated: () => {\n    data?: PaginatedResponse\n    actions: {\n      getPaginated: (pageParam?: number | undefined) => void\n      nextPage: () => void\n      previousPage: () => void\n    }\n  }\n  all: () => {\n    data: ReturnOBJ[]\n    actions: {\n      getAll: () => void\n    }\n  }\n}\nconst PokemonsContext = createContext({} as PokemonsContextTypes)\n\nexport const usePokemons = () => useContext(PokemonsContext)\nexport const PokemonContextWrapper: React.FC = ({ children }) => {\n  const [allData, setAll] = useState<ReturnOBJ[]>([])\n  const [paginatedData, setPaginated] = useState<PaginatedResponse>()\n  const [page, setPage] = useState<number>(1)\n\n  const { actions } = queryPokemons({\n    allData,\n    paginatedData,\n    setAll: (data) => setAll(data),\n    page,\n    setPage,\n    setPaginated\n  })\n\n  const runPaginated = useCallback(() => {\n    actions.paginated.getPaginated()\n    return {\n      data: paginatedData,\n      actions: actions.paginated\n    }\n  }, [])\n\n  const runAll = useCallback(() => {\n    actions.paginated.getPaginated()\n    return {\n      data: allData,\n      actions: actions.all\n    }\n  }, [])\n\n  const ctxValue = useMemo(\n    () => ({\n      paginated: runPaginated,\n      all: runAll\n    }),\n    [actions, paginatedData, allData]\n  )\n\n  return (\n    <PokemonsContext.Provider value={ctxValue}>\n      {children}\n    </PokemonsContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}