{"ast":null,"code":"var _jsxFileName = \"/Users/santiagosouza/poc-context-struct/src/views/Home/Home.view.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { PokemonBar } from '../../components/PokemonBar';\nimport { PokemonContainer } from '../../components/PokemonContainer';\nimport { usePage } from '../../context/PageContext/PageContext';\nimport { queryPokemons } from '../../hooks/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const {\n    entities,\n    dispatchData\n  } = usePage();\n  const {\n    getAll\n  } = queryPokemons();\n  useEffect(() => {\n    /*\n      We need to fetch the main used data for the page\n      on the page load.\n       Let start a paginated request in the first page\n    */\n  }, []);\n\n  const handleLoadAll = () => getAll(data => dispatchData('pokemons', data.results));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HOME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLoadAll,\n      children: \"Load All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PokemonContainer, {\n      children: entities.pokemons && entities.pokemons.map(value => /*#__PURE__*/_jsxDEV(PokemonBar, {\n        children: value.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}, \"sMSkyg/K/zzKOCw3ticDa16008U=\", false, function () {\n  return [usePage];\n});","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/views/Home/Home.view.tsx"],"names":["React","useEffect","PokemonBar","PokemonContainer","usePage","queryPokemons","entities","dispatchData","getAll","handleLoadAll","data","results","pokemons","map","value","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,OAAT,QAAwB,uCAAxB;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAEA,kBAAe,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BH,OAAO,EAA1C;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAaH,aAAa,EAAhC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACJ;AACA;AACA;AACA;AAEG,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMQ,aAAa,GAAG,MACpBD,MAAM,CAAEE,IAAD,IAAUH,YAAY,CAAC,UAAD,EAAaG,IAAI,CAACC,OAAlB,CAAvB,CADR;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAA,gBACGH,QAAQ,CAACM,QAAT,IACCN,QAAQ,CAACM,QAAT,CAAkBC,GAAlB,CAAuBC,KAAD,iBACpB,QAAC,UAAD;AAAA,kBAAaA,KAAK,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3BD;AAAA,UACqCX,OADrC;AAAA","sourcesContent":["import React, { useEffect } from 'react'\nimport { PokemonBar } from '../../components/PokemonBar'\nimport { PokemonContainer } from '../../components/PokemonContainer'\nimport { usePage } from '../../context/PageContext/PageContext'\nimport { queryPokemons } from '../../hooks/query'\n\nexport default () => {\n  const { entities, dispatchData } = usePage()\n  const { getAll } = queryPokemons()\n\n  useEffect(() => {\n    /*\n      We need to fetch the main used data for the page\n      on the page load.\n\n      Let start a paginated request in the first page\n    */\n  }, [])\n\n  const handleLoadAll = () =>\n    getAll((data) => dispatchData('pokemons', data.results))\n  return (\n    <div>\n      <h1>HOME</h1>\n      <button onClick={handleLoadAll}>Load All</button>\n      <PokemonContainer>\n        {entities.pokemons &&\n          entities.pokemons.map((value) => (\n            <PokemonBar>{value.name}</PokemonBar>\n          ))}\n      </PokemonContainer>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}