{"ast":null,"code":"var _jsxFileName = \"/Users/santiagosouza/poc-context-struct/src/context/Pokemons/PokemonsContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { queryPokemons } from '../../hooks/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokemonsContext = /*#__PURE__*/createContext({});\nexport const usePokemons = () => {\n  _s();\n\n  return useContext(PokemonsContext);\n};\n\n_s(usePokemons, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const PokemonContextWrapper = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [allData, setAll] = useState([]);\n  const [paginatedData, setPaginated] = useState();\n  const [page, setPage] = useState(1);\n  const {\n    getPaginated,\n    getAll\n  } = queryPokemons();\n\n  const nextPage = () => {\n    setPage(page + 1);\n  };\n\n  const previousPage = () => {\n    setPage(page - 1);\n  };\n\n  const runPaginated = useCallback(fowardPage => {\n    const {\n      data,\n      error\n    } = getPaginated(fowardPage ? fowardPage : page);\n    if (error) return;\n    return {\n      data: data,\n      actions: {\n        nextPage,\n        previousPage\n      }\n    };\n  }, []);\n  const runAll = useCallback(() => {\n    const {\n      data,\n      error\n    } = getAll();\n    if (error) return;\n    return {\n      data: data\n    };\n  }, []);\n  useEffect(() => {\n    runPaginated();\n  }, [page]);\n  const ctxValue = useMemo(() => ({\n    paginated: runPaginated,\n    all: runAll\n  }), [runAll, runPaginated, paginatedData]);\n  return /*#__PURE__*/_jsxDEV(PokemonsContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(PokemonContextWrapper, \"g9fXB0eXWYgBGm+sBcWJ7HTtIh0=\");\n\n_c = PokemonContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonContextWrapper\");","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/context/Pokemons/PokemonsContext.tsx"],"names":["React","createContext","useCallback","useContext","useEffect","useMemo","useState","queryPokemons","PokemonsContext","usePokemons","PokemonContextWrapper","children","allData","setAll","paginatedData","setPaginated","page","setPage","getPaginated","getAll","nextPage","previousPage","runPaginated","fowardPage","data","error","actions","runAll","ctxValue","paginated","all"],"mappings":";;;;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,OALF,EAMEC,QANF,QAOO,OAPP;AAQA,SAASC,aAAT,QAA8B,mBAA9B;;AAmBA,MAAMC,eAAe,gBAAGP,aAAa,CAAC,EAAD,CAArC;AAEA,OAAO,MAAMQ,WAAW,GAAG;AAAA;;AAAA,SAAMN,UAAU,CAACK,eAAD,CAAhB;AAAA,CAApB;;GAAMC,W;;AACb,OAAO,MAAMC,qBAA+B,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC/D,QAAM,CAACC,OAAD,EAAUC,MAAV,IAAoBP,QAAQ,CAAc,EAAd,CAAlC;AACA,QAAM,CAACQ,aAAD,EAAgBC,YAAhB,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAS,CAAT,CAAhC;AAEA,QAAM;AAAEY,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA2BZ,aAAa,EAA9C;;AAEA,QAAMa,QAAQ,GAAG,MAAM;AACrBH,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,GAFD;;AAGA,QAAMK,YAAY,GAAG,MAAM;AACzBJ,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,GAFD;;AAIA,QAAMM,YAAY,GAAGpB,WAAW,CAAEqB,UAAD,IAAyB;AACxD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBP,YAAY,CAACK,UAAU,GAAGA,UAAH,GAAgBP,IAA3B,CAApC;AACA,QAAIS,KAAJ,EAAW;AAEX,WAAO;AACLD,MAAAA,IAAI,EAAEA,IADD;AAELE,MAAAA,OAAO,EAAE;AAAEN,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAFJ,KAAP;AAID,GAR+B,EAQ7B,EAR6B,CAAhC;AAUA,QAAMM,MAAM,GAAGzB,WAAW,CAAC,MAAM;AAC/B,UAAM;AAAEsB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBN,MAAM,EAA9B;AACA,QAAIM,KAAJ,EAAW;AAEX,WAAO;AACLD,MAAAA,IAAI,EAAEA;AADD,KAAP;AAGD,GAPyB,EAOvB,EAPuB,CAA1B;AASApB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACN,IAAD,CAFM,CAAT;AAIA,QAAMY,QAA8B,GAAGvB,OAAO,CAC5C,OAAO;AACLwB,IAAAA,SAAS,EAAEP,YADN;AAELQ,IAAAA,GAAG,EAAEH;AAFA,GAAP,CAD4C,EAK5C,CAACA,MAAD,EAASL,YAAT,EAAuBR,aAAvB,CAL4C,CAA9C;AAQA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEc,QAAjC;AAAA,cACGjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlDM;;IAAMD,qB;;KAAAA,qB","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState\n} from 'react'\nimport { queryPokemons } from '../../hooks/query'\nimport {\n  PaginatedResponse,\n  QueryPokemonsTypes,\n  ReturnOBJ\n} from '../../hooks/query/queryPokemons'\n\ninterface PokemonsContextTypes {\n  paginated: (fowardPage?: number) => {\n    data?: PaginatedResponse\n    actions: {\n      nextPage: () => void\n      previousPage: () => void\n    }\n  }\n  all: () => {\n    data?: ReturnOBJ[]\n  }\n}\nconst PokemonsContext = createContext({} as PokemonsContextTypes)\n\nexport const usePokemons = () => useContext(PokemonsContext)\nexport const PokemonContextWrapper: React.FC = ({ children }) => {\n  const [allData, setAll] = useState<ReturnOBJ[]>([])\n  const [paginatedData, setPaginated] = useState<PaginatedResponse>()\n  const [page, setPage] = useState<number>(1)\n\n  const { getPaginated, getAll } = queryPokemons()\n\n  const nextPage = () => {\n    setPage(page + 1)\n  }\n  const previousPage = () => {\n    setPage(page - 1)\n  }\n\n  const runPaginated = useCallback((fowardPage?: number) => {\n    const { data, error } = getPaginated(fowardPage ? fowardPage : page)\n    if (error) return\n\n    return {\n      data: data,\n      actions: { nextPage, previousPage }\n    }\n  }, [])\n\n  const runAll = useCallback(() => {\n    const { data, error } = getAll()\n    if (error) return\n\n    return {\n      data: data\n    }\n  }, [])\n\n  useEffect(() => {\n    runPaginated()\n  }, [page])\n\n  const ctxValue: PokemonsContextTypes = useMemo(\n    () => ({\n      paginated: runPaginated,\n      all: runAll\n    }),\n    [runAll, runPaginated, paginatedData]\n  )\n\n  return (\n    <PokemonsContext.Provider value={ctxValue}>\n      {children}\n    </PokemonsContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}