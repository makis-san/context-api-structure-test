{"ast":null,"code":"var _jsxFileName = \"/Users/santiagosouza/poc-context-struct/src/context/PageContext/PageContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PageContext = /*#__PURE__*/createContext({});\nexport const usePage = () => {\n  _s();\n\n  return useContext(PageContext);\n};\n\n_s(usePage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const PageContextWrapper = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [entities, setEntities] = useState({}); // Set entities value\n\n  const dispatchData = useCallback((entity, data) => {\n    console.log(entities.pokemons);\n\n    if (entities[entity] && entities[entity].length > 0) {\n      return setEntities(cur => ({ ...cur,\n        [entity]: [...cur[entity], ...data]\n      }));\n    }\n\n    return setEntities(cur => ({ ...cur,\n      [entity]: data\n    }));\n  }, []);\n  const ctxValue = useMemo(() => ({\n    dispatchData,\n    entities\n  }), [dispatchData, entities]);\n  return /*#__PURE__*/_jsxDEV(PageContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(PageContextWrapper, \"TlCCeV4UTGlgYgYF04KjOikjbdA=\");\n\n_c = PageContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageContextWrapper\");","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/context/PageContext/PageContext.tsx"],"names":["React","createContext","useCallback","useContext","useMemo","useState","PageContext","usePage","PageContextWrapper","children","entities","setEntities","dispatchData","entity","data","console","log","pokemons","length","cur","ctxValue"],"mappings":";;;;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,QALF,QAMO,OANP;;AA0BA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAEA,OAAO,MAAMM,OAAO,GAAG;AAAA;;AAAA,SAAMJ,UAAU,CAACG,WAAD,CAAhB;AAAA,CAAhB;;GAAMC,O;;AAEb,OAAO,MAAMC,kBAA4B,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CACtC,EADsC,CAAxC,CAD4D,CAK5D;;AACA,QAAMO,YAAY,GAAGV,WAAW,CAC9B,CAACW,MAAD,EAA6BC,IAA7B,KAA0E;AACxEC,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACO,QAArB;;AAEA,QAAIP,QAAQ,CAACG,MAAD,CAAR,IAAoBH,QAAQ,CAACG,MAAD,CAAR,CAAiBK,MAAjB,GAA0B,CAAlD,EAAqD;AACnD,aAAOP,WAAW,CAAEQ,GAAD,KAAU,EAC3B,GAAGA,GADwB;AAE3B,SAACN,MAAD,GAAU,CAAC,GAAGM,GAAG,CAACN,MAAD,CAAP,EAAiB,GAAGC,IAApB;AAFiB,OAAV,CAAD,CAAlB;AAID;;AACD,WAAOH,WAAW,CAAEQ,GAAD,KAAU,EAC3B,GAAGA,GADwB;AAE3B,OAACN,MAAD,GAAUC;AAFiB,KAAV,CAAD,CAAlB;AAID,GAd6B,EAe9B,EAf8B,CAAhC;AAkBA,QAAMM,QAAQ,GAAGhB,OAAO,CACtB,OAAO;AACLQ,IAAAA,YADK;AAELF,IAAAA;AAFK,GAAP,CADsB,EAKtB,CAACE,YAAD,EAAeF,QAAf,CALsB,CAAxB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEU,QAA7B;AAAA,cAAwCX;AAAxC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAlCM;;IAAMD,kB;;KAAAA,kB","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState\n} from 'react'\nimport { ReturnOBJ } from '../../hooks/query/queryPokemons'\n\ndeclare interface EntitiesType {\n  pokemons: ReturnOBJ\n  student: string\n}\n\ndeclare type EntitiesOBJType = {\n  [Property in keyof EntitiesType]-?: EntitiesType[Property][]\n}\n\ninterface PageContextTypes {\n  entities: EntitiesOBJType\n  dispatchData: (\n    entity: keyof EntitiesType,\n    data: EntitiesType[keyof EntitiesType][]\n  ) => void\n}\n\nconst PageContext = createContext({} as PageContextTypes)\n\nexport const usePage = () => useContext(PageContext)\n\nexport const PageContextWrapper: React.FC = ({ children }) => {\n  const [entities, setEntities] = useState<EntitiesOBJType>(\n    {} as EntitiesOBJType\n  )\n\n  // Set entities value\n  const dispatchData = useCallback(\n    (entity: keyof EntitiesType, data: EntitiesType[keyof EntitiesType][]) => {\n      console.log(entities.pokemons)\n\n      if (entities[entity] && entities[entity].length > 0) {\n        return setEntities((cur) => ({\n          ...cur,\n          [entity]: [...cur[entity], ...data]\n        }))\n      }\n      return setEntities((cur) => ({\n        ...cur,\n        [entity]: data\n      }))\n    },\n    []\n  )\n\n  const ctxValue = useMemo(\n    () => ({\n      dispatchData,\n      entities\n    }),\n    [dispatchData, entities]\n  )\n  return (\n    <PageContext.Provider value={ctxValue}>{children}</PageContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}