{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { api } from '../../service/api';\nexport const queryPokemons = () => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const getAll = () => {\n    _s();\n\n    const {\n      data,\n      error\n    } = useQuery('pokemons/all', () => api.get(`/pokemon/?limit=500&offset=500`).then(res => res.data), {\n      keepPreviousData: true\n    });\n    return {\n      data,\n      error\n    };\n  };\n\n  _s(getAll, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n    return [useQuery];\n  });\n\n  const getPaginated = pageParam => {\n    _s2();\n\n    const {\n      data,\n      error\n    } = useQuery('pokemons/paginated', () => api.get(`/pokemon/?limit=20&offset=${20 * page}`).then(res => res.data), {\n      keepPreviousData: true\n    });\n    return {\n      data,\n      error\n    };\n  };\n\n  _s2(getPaginated, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n    return [useQuery];\n  });\n\n  const nextPage = () => setPage(page + 1);\n\n  const previousPage = () => setPage(page + 1);\n\n  return {\n    data: {\n      allData,\n      paginated: {\n        paginatedData,\n        page\n      }\n    },\n    actions: {\n      paginated: {\n        getPaginated,\n        nextPage,\n        previousPage\n      },\n      all: {\n        getAll\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/hooks/query/queryPokemons.ts"],"names":["useQuery","api","queryPokemons","getAll","data","error","get","then","res","keepPreviousData","getPaginated","pageParam","page","nextPage","setPage","previousPage","allData","paginated","paginatedData","actions","all"],"mappings":"AACA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,mBAApB;AAmCA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;AAAA;;AACjC,QAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBL,QAAQ,CAC9B,cAD8B,EAE9B,MACEC,GAAG,CACAK,GADH,CAC2B,gCAD3B,EAEGC,IAFH,CAESC,GAAD,IAASA,GAAG,CAACJ,IAFrB,CAH4B,EAM9B;AACEK,MAAAA,gBAAgB,EAAE;AADpB,KAN8B,CAAhC;AAWA,WAAO;AAAEL,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAP;AACD,GAbD;;AADiC,KAC3BF,MAD2B;AAAA,YAEPH,QAFO;AAAA;;AAgBjC,QAAMU,YAAY,GAAIC,SAAD,IAAuB;AAAA;;AAC1C,UAAM;AAAEP,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBL,QAAQ,CAC9B,oBAD8B,EAE9B,MACEC,GAAG,CACAK,GADH,CAC2B,6BAA4B,KAAKM,IAAK,EADjE,EAEGL,IAFH,CAESC,GAAD,IAASA,GAAG,CAACJ,IAFrB,CAH4B,EAM9B;AACEK,MAAAA,gBAAgB,EAAE;AADpB,KAN8B,CAAhC;AAUA,WAAO;AAAEL,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAP;AACD,GAZD;;AAhBiC,MAgB3BK,YAhB2B;AAAA,YAiBPV,QAjBO;AAAA;;AA8BjC,QAAMa,QAAQ,GAAG,MAAMC,OAAO,CAACF,IAAI,GAAG,CAAR,CAA9B;;AACA,QAAMG,YAAY,GAAG,MAAMD,OAAO,CAACF,IAAI,GAAG,CAAR,CAAlC;;AAEA,SAAO;AACLR,IAAAA,IAAI,EAAE;AACJY,MAAAA,OADI;AAEJC,MAAAA,SAAS,EAAE;AACTC,QAAAA,aADS;AAETN,QAAAA;AAFS;AAFP,KADD;AAQLO,IAAAA,OAAO,EAAE;AACPF,MAAAA,SAAS,EAAE;AACTP,QAAAA,YADS;AAETG,QAAAA,QAFS;AAGTE,QAAAA;AAHS,OADJ;AAOPK,MAAAA,GAAG,EAAE;AACHjB,QAAAA;AADG;AAPE;AARJ,GAAP;AAoBD,CArDM","sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { api } from '../../service/api'\n\nexport type ReturnOBJ = {\n  name: string\n  url: string\n}\n\nexport interface PaginatedResponse {\n  count: number\n  next?: string\n  previous?: string\n  results: ReturnOBJ[]\n}\n\nexport interface QueryPokemonsTypes {\n  data: {\n    allData?: ReturnOBJ[]\n    paginated: {\n      paginatedData?: PaginatedResponse\n      page: number\n    }\n  }\n  actions: {\n    paginated: {\n      getPaginated: (pageParam?: number) => void\n      nextPage: () => void\n      previousPage: () => void\n    }\n\n    all: {\n      getAll: () => void\n    }\n  }\n}\n\nexport const queryPokemons = () => {\n  const getAll = () => {\n    const { data, error } = useQuery(\n      'pokemons/all',\n      () =>\n        api\n          .get<PaginatedResponse>(`/pokemon/?limit=500&offset=500`)\n          .then((res) => res.data),\n      {\n        keepPreviousData: true\n      }\n    )\n\n    return { data, error }\n  }\n\n  const getPaginated = (pageParam: number) => {\n    const { data, error } = useQuery(\n      'pokemons/paginated',\n      () =>\n        api\n          .get<PaginatedResponse>(`/pokemon/?limit=20&offset=${20 * page}`)\n          .then((res) => res.data),\n      {\n        keepPreviousData: true\n      }\n    )\n    return { data, error }\n  }\n\n  const nextPage = () => setPage(page + 1)\n  const previousPage = () => setPage(page + 1)\n\n  return {\n    data: {\n      allData,\n      paginated: {\n        paginatedData,\n        page\n      }\n    },\n    actions: {\n      paginated: {\n        getPaginated,\n        nextPage,\n        previousPage\n      },\n\n      all: {\n        getAll\n      }\n    }\n  } as QueryPokemonsTypes\n}\n"]},"metadata":{},"sourceType":"module"}