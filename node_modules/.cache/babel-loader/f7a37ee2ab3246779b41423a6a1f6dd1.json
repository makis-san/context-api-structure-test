{"ast":null,"code":"import { useQuery } from 'react-query';\nimport { api } from '../../service/api';\nexport const queryPokemons = _ref => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  let {\n    allData,\n    page,\n    setAll,\n    setPage,\n    setPaginated,\n    paginatedData\n  } = _ref;\n\n  const getAll = () => {\n    _s();\n\n    const {\n      data,\n      error\n    } = useQuery('pokemons/all', () => api.get(`/pokemon/?limit=500&offset=500`).then(res => res.data), {\n      keepPreviousData: true,\n      onSuccess: data => {\n        setAll(data === null || data === void 0 ? void 0 : data.results);\n      }\n    });\n  };\n\n  _s(getAll, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n    return [useQuery];\n  });\n\n  const getPaginated = function () {\n    _s2();\n\n    let pageParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : page;\n    const {\n      data,\n      error\n    } = useQuery('pokemons/paginated', () => api.get(`/pokemon/?limit=20&offset=${20 * page}`).then(res => res.data), {\n      keepPreviousData: true,\n      onSuccess: data => {\n        if (!allData) {\n          setAll([...allData, ...data.results]);\n        }\n\n        setPaginated(data);\n      }\n    });\n  };\n\n  _s2(getPaginated, \"jnKEiAG78WqeE0AS5/bjUCg4uK4=\", false, function () {\n    return [useQuery];\n  });\n\n  const nextPage = () => setPage(page + 1);\n\n  const previousPage = () => setPage(page + 1);\n\n  return {\n    data: {\n      allData,\n      paginated: {\n        paginatedData,\n        page\n      }\n    },\n    actions: {\n      paginated: {\n        getPaginated,\n        nextPage,\n        previousPage\n      },\n      all: {\n        getAll\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/hooks/query/queryPokemons.ts"],"names":["useQuery","api","queryPokemons","allData","page","setAll","setPage","setPaginated","paginatedData","getAll","data","error","get","then","res","keepPreviousData","onSuccess","results","getPaginated","pageParam","nextPage","previousPage","paginated","actions","all"],"mappings":"AACA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,GAAT,QAAoB,mBAApB;AA4CA,OAAO,MAAMC,aAAa,GAAG,QAOH;AAAA;AAAA;;AAAA,MAPI;AAC5BC,IAAAA,OAD4B;AAE5BC,IAAAA,IAF4B;AAG5BC,IAAAA,MAH4B;AAI5BC,IAAAA,OAJ4B;AAK5BC,IAAAA,YAL4B;AAM5BC,IAAAA;AAN4B,GAOJ;;AACxB,QAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBX,QAAQ,CAC9B,cAD8B,EAE9B,MACEC,GAAG,CACAW,GADH,CAC2B,gCAD3B,EAEGC,IAFH,CAESC,GAAD,IAASA,GAAG,CAACJ,IAFrB,CAH4B,EAM9B;AACEK,MAAAA,gBAAgB,EAAE,IADpB;AAEEC,MAAAA,SAAS,EAAGN,IAAD,IAAU;AACnBL,QAAAA,MAAM,CAACK,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEO,OAAP,CAAN;AACD;AAJH,KAN8B,CAAhC;AAaD,GAdD;;AADwB,KAClBR,MADkB;AAAA,YAEET,QAFF;AAAA;;AAiBxB,QAAMkB,YAAY,GAAG,YAA8B;AAAA;;AAAA,QAA7BC,SAA6B,uEAATf,IAAS;AACjD,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBX,QAAQ,CAC9B,oBAD8B,EAE9B,MACEC,GAAG,CACAW,GADH,CAC2B,6BAA4B,KAAKR,IAAK,EADjE,EAEGS,IAFH,CAESC,GAAD,IAASA,GAAG,CAACJ,IAFrB,CAH4B,EAM9B;AACEK,MAAAA,gBAAgB,EAAE,IADpB;AAEEC,MAAAA,SAAS,EAAGN,IAAD,IAAU;AACnB,YAAI,CAACP,OAAL,EAAc;AACZE,UAAAA,MAAM,CAAC,CAAC,GAAGF,OAAJ,EAAa,GAAGO,IAAI,CAACO,OAArB,CAAD,CAAN;AACD;;AACDV,QAAAA,YAAY,CAACG,IAAD,CAAZ;AACD;AAPH,KAN8B,CAAhC;AAgBD,GAjBD;;AAjBwB,MAiBlBQ,YAjBkB;AAAA,YAkBElB,QAlBF;AAAA;;AAoCxB,QAAMoB,QAAQ,GAAG,MAAMd,OAAO,CAACF,IAAI,GAAG,CAAR,CAA9B;;AACA,QAAMiB,YAAY,GAAG,MAAMf,OAAO,CAACF,IAAI,GAAG,CAAR,CAAlC;;AAEA,SAAO;AACLM,IAAAA,IAAI,EAAE;AACJP,MAAAA,OADI;AAEJmB,MAAAA,SAAS,EAAE;AACTd,QAAAA,aADS;AAETJ,QAAAA;AAFS;AAFP,KADD;AAQLmB,IAAAA,OAAO,EAAE;AACPD,MAAAA,SAAS,EAAE;AACTJ,QAAAA,YADS;AAETE,QAAAA,QAFS;AAGTC,QAAAA;AAHS,OADJ;AAOPG,MAAAA,GAAG,EAAE;AACHf,QAAAA;AADG;AAPE;AARJ,GAAP;AAoBD,CAlEM","sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { api } from '../../service/api'\n\nexport type ReturnOBJ = {\n  name: string\n  url: string\n}\n\nexport interface PaginatedResponse {\n  count: number\n  next?: string\n  previous?: string\n  results: ReturnOBJ[]\n}\n\nexport interface QueryPokemonsTypes {\n  data: {\n    allData?: ReturnOBJ[]\n    paginated: {\n      paginatedData?: PaginatedResponse\n      page: number\n    }\n  }\n  actions: {\n    paginated: {\n      getPaginated: (pageParam?: number) => void\n      nextPage: () => void\n      previousPage: () => void\n    }\n\n    all: {\n      getAll: () => void\n    }\n  }\n}\n\ntype QueryPokemonsProps = {\n  setPage: (page: number) => void\n  page: number\n  setPaginated: (data: PaginatedResponse) => void\n  setAll: (data: ReturnOBJ[]) => void\n  allData: ReturnOBJ[] | []\n  paginatedData?: PaginatedResponse\n}\n\nexport const queryPokemons = ({\n  allData,\n  page,\n  setAll,\n  setPage,\n  setPaginated,\n  paginatedData\n}: QueryPokemonsProps) => {\n  const getAll = () => {\n    const { data, error } = useQuery(\n      'pokemons/all',\n      () =>\n        api\n          .get<PaginatedResponse>(`/pokemon/?limit=500&offset=500`)\n          .then((res) => res.data),\n      {\n        keepPreviousData: true,\n        onSuccess: (data) => {\n          setAll(data?.results)\n        }\n      }\n    )\n  }\n\n  const getPaginated = (pageParam: number = page) => {\n    const { data, error } = useQuery(\n      'pokemons/paginated',\n      () =>\n        api\n          .get<PaginatedResponse>(`/pokemon/?limit=20&offset=${20 * page}`)\n          .then((res) => res.data),\n      {\n        keepPreviousData: true,\n        onSuccess: (data) => {\n          if (!allData) {\n            setAll([...allData, ...data.results])\n          }\n          setPaginated(data)\n        }\n      }\n    )\n  }\n\n  const nextPage = () => setPage(page + 1)\n  const previousPage = () => setPage(page + 1)\n\n  return {\n    data: {\n      allData,\n      paginated: {\n        paginatedData,\n        page\n      }\n    },\n    actions: {\n      paginated: {\n        getPaginated,\n        nextPage,\n        previousPage\n      },\n\n      all: {\n        getAll\n      }\n    }\n  } as QueryPokemonsTypes\n}\n"]},"metadata":{},"sourceType":"module"}