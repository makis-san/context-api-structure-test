{"ast":null,"code":"import _slicedToArray from\"/Users/santiagosouza/poc-context-struct/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{PokemonBar}from'../../components/PokemonBar';import{PokemonContainer}from'../../components/PokemonContainer';import{usePage}from'../../context/PageContext/PageContext';import{queryPokemons}from'../../hooks/query';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default(function(){var _usePage=usePage(),entities=_usePage.entities,dispatchData=_usePage.dispatchData;var _queryPokemons=queryPokemons(),getAll=_queryPokemons.getAll,getPaginated=_queryPokemons.getPaginated;var _useState=useState(1),_useState2=_slicedToArray(_useState,2),page=_useState2[0],setPage=_useState2[1];useEffect(function(){/*\n      We need to fetch the main used data for the page\n      on the page load.\n\n      Let start a paginated request in the first page\n    */},[]);var handleLoadAll=function handleLoadAll(){return getAll(function(data){return dispatchData('pokemons',data.results);});};var handleLoadPaginated=function handleLoadPaginated(pageParam){var keepLast=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return getPaginated(pageParam,function(data){return dispatchData('pokemons',data.results,{keepLast:keepLast});});};var handleNextPage=function handleNextPage(){setPage(page+1);handleLoadPaginated(page+1);};var handleBackPage=function handleBackPage(){setPage(page-1);handleLoadPaginated(page-1);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"HOME\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return handleLoadAll();},children:\"Load All\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return handleLoadPaginated(1,false);},children:\"Load Paginated\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return handleBackPage();},children:'<'}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return handleNextPage();},children:'>'}),/*#__PURE__*/_jsx(PokemonContainer,{children:entities.pokemons&&entities.pokemons.map(function(value){return/*#__PURE__*/_jsx(PokemonBar,{children:value.name});})})]});});","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/views/Home/Home.view.tsx"],"names":["React","useEffect","useState","PokemonBar","PokemonContainer","usePage","queryPokemons","entities","dispatchData","getAll","getPaginated","page","setPage","handleLoadAll","data","results","handleLoadPaginated","pageParam","keepLast","handleNextPage","handleBackPage","pokemons","map","value","name"],"mappings":"6HAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,gBAAT,KAAiC,mCAAjC,CACA,OAASC,OAAT,KAAwB,uCAAxB,CACA,OAASC,aAAT,KAA8B,mBAA9B,C,wFAEA,eAAe,UAAM,CACnB,aAAmCD,OAAO,EAA1C,CAAQE,QAAR,UAAQA,QAAR,CAAkBC,YAAlB,UAAkBA,YAAlB,CACA,mBAAiCF,aAAa,EAA9C,CAAQG,MAAR,gBAAQA,MAAR,CAAgBC,YAAhB,gBAAgBA,YAAhB,CAEA,cAAwBR,QAAQ,CAAC,CAAD,CAAhC,wCAAOS,IAAP,eAAaC,OAAb,eAEAX,SAAS,CAAC,UAAM,CACd;AACJ;AACA;AACA;AACA;AACA,MACG,CAPQ,CAON,EAPM,CAAT,CASA,GAAMY,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SACpBJ,CAAAA,MAAM,CAAC,SAACK,IAAD,QAAUN,CAAAA,YAAY,CAAC,UAAD,CAAaM,IAAI,CAACC,OAAlB,CAAtB,EAAD,CADc,EAAtB,CAGA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,SAAD,KAAoBC,CAAAA,QAApB,2DAA+B,IAA/B,OAC1BR,CAAAA,YAAY,CAACO,SAAD,CAAY,SAACH,IAAD,QACtBN,CAAAA,YAAY,CAAC,UAAD,CAAaM,IAAI,CAACC,OAAlB,CAA2B,CACrCG,QAAQ,CAARA,QADqC,CAA3B,CADU,EAAZ,CADc,EAA5B,CAOA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BP,OAAO,CAACD,IAAI,CAAG,CAAR,CAAP,CACAK,mBAAmB,CAACL,IAAI,CAAG,CAAR,CAAnB,CACD,CAHD,CAKA,GAAMS,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BR,OAAO,CAACD,IAAI,CAAG,CAAR,CAAP,CACAK,mBAAmB,CAACL,IAAI,CAAG,CAAR,CAAnB,CACD,CAHD,CAKA,mBACE,oCACE,4BADF,cAEE,eAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAE,yBAAME,CAAAA,aAAa,EAAnB,EAA/B,sBAFF,cAKE,eAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAE,yBAAMG,CAAAA,mBAAmB,CAAC,CAAD,CAAI,KAAJ,CAAzB,EAA/B,4BALF,cAQE,eAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAE,yBAAMI,CAAAA,cAAc,EAApB,EAA/B,UACG,GADH,EARF,cAWE,eAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAE,yBAAMD,CAAAA,cAAc,EAApB,EAA/B,UACG,GADH,EAXF,cAcE,KAAC,gBAAD,WACGZ,QAAQ,CAACc,QAAT,EACCd,QAAQ,CAACc,QAAT,CAAkBC,GAAlB,CAAsB,SAACC,KAAD,qBACpB,KAAC,UAAD,WAAaA,KAAK,CAACC,IAAnB,EADoB,EAAtB,CAFJ,EAdF,GADF,CAuBD,CA1DD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { PokemonBar } from '../../components/PokemonBar'\nimport { PokemonContainer } from '../../components/PokemonContainer'\nimport { usePage } from '../../context/PageContext/PageContext'\nimport { queryPokemons } from '../../hooks/query'\n\nexport default () => {\n  const { entities, dispatchData } = usePage()\n  const { getAll, getPaginated } = queryPokemons()\n\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    /*\n      We need to fetch the main used data for the page\n      on the page load.\n\n      Let start a paginated request in the first page\n    */\n  }, [])\n\n  const handleLoadAll = () =>\n    getAll((data) => dispatchData('pokemons', data.results))\n\n  const handleLoadPaginated = (pageParam: number, keepLast = true) =>\n    getPaginated(pageParam, (data) =>\n      dispatchData('pokemons', data.results, {\n        keepLast\n      })\n    )\n\n  const handleNextPage = () => {\n    setPage(page + 1)\n    handleLoadPaginated(page + 1)\n  }\n\n  const handleBackPage = () => {\n    setPage(page - 1)\n    handleLoadPaginated(page - 1)\n  }\n\n  return (\n    <div>\n      <h1>HOME</h1>\n      <button type='button' onClick={() => handleLoadAll()}>\n        Load All\n      </button>\n      <button type='button' onClick={() => handleLoadPaginated(1, false)}>\n        Load Paginated\n      </button>\n      <button type='button' onClick={() => handleBackPage()}>\n        {'<'}\n      </button>\n      <button type='button' onClick={() => handleNextPage()}>\n        {'>'}\n      </button>\n      <PokemonContainer>\n        {entities.pokemons &&\n          entities.pokemons.map((value) => (\n            <PokemonBar>{value.name}</PokemonBar>\n          ))}\n      </PokemonContainer>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}