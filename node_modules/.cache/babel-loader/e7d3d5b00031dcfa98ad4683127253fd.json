{"ast":null,"code":"var _jsxFileName = \"/Users/santiagosouza/poc-context-struct/src/context/Pokemons/PokemonsContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useMemo, useState } from 'react';\nimport { queryPokemons } from '../../hooks/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PokemonsContext = /*#__PURE__*/createContext({});\nexport const usePokemons = () => {\n  _s();\n\n  return useContext(PokemonsContext);\n};\n\n_s(usePokemons, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const PokemonContextWrapper = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [allData, setAll] = useState([]);\n  const [page, setPage] = useState(1);\n  const {\n    actions,\n    data\n  } = queryPokemons({\n    allData,\n    paginatedData,\n    setAll,\n    page,\n    setPage,\n    setPaginated\n  });\n\n  const runPaginated = () => {\n    actions.paginated.getPaginated();\n    return {\n      data: data.paginated,\n      actions: actions.paginated\n    };\n  };\n\n  const runAll = () => {\n    actions.paginated.getPaginated();\n    return {\n      data: data.allData,\n      actions: actions.all\n    };\n  };\n\n  const ctxValue = useMemo(() => ({\n    paginated: runPaginated,\n    all: runAll\n  }), [actions, data]);\n  return /*#__PURE__*/_jsxDEV(PokemonsContext.Provider, {\n    value: ctxValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(PokemonContextWrapper, \"Hgb30exWrX9coeKLwfPDuduh4l8=\");\n\n_c = PokemonContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonContextWrapper\");","map":{"version":3,"sources":["/Users/santiagosouza/poc-context-struct/src/context/Pokemons/PokemonsContext.tsx"],"names":["React","createContext","useContext","useMemo","useState","queryPokemons","PokemonsContext","usePokemons","PokemonContextWrapper","children","allData","setAll","page","setPage","actions","data","paginatedData","setPaginated","runPaginated","paginated","getPaginated","runAll","all","ctxValue"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,EAAoDC,QAApD,QAAoE,OAApE;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AA0BA,MAAMC,eAAe,gBAAGL,aAAa,CAAC,EAAD,CAArC;AAEA,OAAO,MAAMM,WAAW,GAAG;AAAA;;AAAA,SAAML,UAAU,CAACI,eAAD,CAAhB;AAAA,CAApB;;GAAMC,W;;AACb,OAAO,MAAMC,qBAA+B,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC/D,QAAM,CAACC,OAAD,EAAUC,MAAV,IAAoBP,QAAQ,CAAc,EAAd,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAS,CAAT,CAAhC;AAEA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBV,aAAa,CAAC;AACtCK,IAAAA,OADsC;AAEtCM,IAAAA,aAFsC;AAGtCL,IAAAA,MAHsC;AAItCC,IAAAA,IAJsC;AAKtCC,IAAAA,OALsC;AAMtCI,IAAAA;AANsC,GAAD,CAAvC;;AASA,QAAMC,YAAY,GAAG,MAAM;AACzBJ,IAAAA,OAAO,CAACK,SAAR,CAAkBC,YAAlB;AACA,WAAO;AACLL,MAAAA,IAAI,EAAEA,IAAI,CAACI,SADN;AAELL,MAAAA,OAAO,EAAEA,OAAO,CAACK;AAFZ,KAAP;AAID,GAND;;AAQA,QAAME,MAAM,GAAG,MAAM;AACnBP,IAAAA,OAAO,CAACK,SAAR,CAAkBC,YAAlB;AACA,WAAO;AACLL,MAAAA,IAAI,EAAEA,IAAI,CAACL,OADN;AAELI,MAAAA,OAAO,EAAEA,OAAO,CAACQ;AAFZ,KAAP;AAID,GAND;;AAQA,QAAMC,QAA8B,GAAGpB,OAAO,CAC5C,OAAO;AACLgB,IAAAA,SAAS,EAAED,YADN;AAELI,IAAAA,GAAG,EAAED;AAFA,GAAP,CAD4C,EAK5C,CAACP,OAAD,EAAUC,IAAV,CAL4C,CAA9C;AAQA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEQ,QAAjC;AAAA,cACGd;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1CM;;IAAMD,qB;;KAAAA,qB","sourcesContent":["import React, { createContext, useContext, useMemo, useState } from 'react'\nimport { queryPokemons } from '../../hooks/query'\nimport {\n  PaginatedResponse,\n  QueryPokemonsTypes,\n  ReturnOBJ\n} from '../../hooks/query/queryPokemons'\n\ninterface PokemonsContextTypes {\n  paginated: () => {\n    data: {\n      paginatedData?: PaginatedResponse\n      page: number\n    }\n    actions: {\n      getPaginated: (pageParam?: number | undefined) => void\n      nextPage: () => void\n      previousPage: () => void\n    }\n  }\n  all: () => {\n    data?: ReturnOBJ[]\n    actions: {\n      getAll: () => void\n    }\n  }\n}\nconst PokemonsContext = createContext({} as PokemonsContextTypes)\n\nexport const usePokemons = () => useContext(PokemonsContext)\nexport const PokemonContextWrapper: React.FC = ({ children }) => {\n  const [allData, setAll] = useState<ReturnOBJ[]>([])\n  const [page, setPage] = useState<number>(1)\n\n  const { actions, data } = queryPokemons({\n    allData,\n    paginatedData,\n    setAll,\n    page,\n    setPage,\n    setPaginated\n  })\n\n  const runPaginated = () => {\n    actions.paginated.getPaginated()\n    return {\n      data: data.paginated,\n      actions: actions.paginated\n    }\n  }\n\n  const runAll = () => {\n    actions.paginated.getPaginated()\n    return {\n      data: data.allData,\n      actions: actions.all\n    }\n  }\n\n  const ctxValue: PokemonsContextTypes = useMemo(\n    () => ({\n      paginated: runPaginated,\n      all: runAll\n    }),\n    [actions, data]\n  )\n\n  return (\n    <PokemonsContext.Provider value={ctxValue}>\n      {children}\n    </PokemonsContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}